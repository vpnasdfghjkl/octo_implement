# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dynamic_biped/armHandPose.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class armHandPose(genpy.Message):
  _md5sum = "ae653a36c40e6220e166614d7037aae2"
  _type = "dynamic_biped/armHandPose"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[3] pos_xyz
float64[4] quat_xyzw

float64[7] joint_angles"""
  __slots__ = ['pos_xyz','quat_xyzw','joint_angles']
  _slot_types = ['float64[3]','float64[4]','float64[7]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pos_xyz,quat_xyzw,joint_angles

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(armHandPose, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pos_xyz is None:
        self.pos_xyz = [0.] * 3
      if self.quat_xyzw is None:
        self.quat_xyzw = [0.] * 4
      if self.joint_angles is None:
        self.joint_angles = [0.] * 7
    else:
      self.pos_xyz = [0.] * 3
      self.quat_xyzw = [0.] * 4
      self.joint_angles = [0.] * 7

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3d().pack(*self.pos_xyz))
      buff.write(_get_struct_4d().pack(*self.quat_xyzw))
      buff.write(_get_struct_7d().pack(*self.joint_angles))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 24
      self.pos_xyz = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 32
      self.quat_xyzw = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 56
      self.joint_angles = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.pos_xyz.tostring())
      buff.write(self.quat_xyzw.tostring())
      buff.write(self.joint_angles.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 24
      self.pos_xyz = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 32
      self.quat_xyzw = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 56
      self.joint_angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
